
/*
KeyExpansion(byte Key[4*Nk] word W[Nb*(Nr+1)])
{
    for(i = 0; i < Nk; i++)
    W[i] = (Key[4*i],Key[4*i+1],Key[4*i+2],Key[4*i+3]);
    
    for(i = Nk; i < Nb * (Nr + 1); i++)
    {
        temp = W[i - 1];
        if (i % Nk == 0)
            temp = SubByte(RotByte(temp)) ^ Rcon[i / Nk];
        W[i] = W[i - Nk] ^ temp;
    }
}

To run this program you need Java SDK (I use 1.8.201) and jGRASP to compile and run it
*/

import java.lang.Integer; // Integer class to work with int as unsigned int
import java.util.Formatter; //Format Output

public class keyExpantion {
    public static int SubWord(int inValue) {
        int byte0;
        int byte1;
        int byte2;
        int byte3;

        int[][] sbox = {
                { 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 },
                { 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0 },
                { 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15 },
                { 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75 },
                { 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84 },
                { 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf },
                { 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8 },
                { 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2 },
                { 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73 },
                { 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb },
                { 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79 },
                { 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08 },
                { 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a },
                { 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e },
                { 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf },
                { 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 } };

        byte0 = Integer.rotateRight(inValue, 24) & 0x000000FF;

        inValue = Integer.rotateLeft(inValue, 8) & 0xFFFFFF00;
        byte1 = Integer.rotateRight(inValue, 24) & 0x000000FF;

        inValue = Integer.rotateLeft(inValue, 8) & 0xFFFFFF00;
        byte2 = Integer.rotateRight(inValue, 24) & 0x000000FF;

        inValue = Integer.rotateLeft(inValue, 8) & 0xFFFFFF00;
        byte3 = Integer.rotateRight(inValue, 24) & 0x000000FF;

        byte0 = sbox[byte0 / 16][byte0 % 16];
        byte1 = sbox[byte1 / 16][byte1 % 16];
        byte2 = sbox[byte2 / 16][byte2 % 16];
        byte3 = sbox[byte3 / 16][byte3 % 16];

        inValue = (Integer.rotateLeft(byte0, 24) & 0xFF000000) + (Integer.rotateLeft(byte1, 16) & 0x00FF0000)
                + (Integer.rotateLeft(byte3, 8) & 0x0000FF00) + (byte3 & 0x000000FF);

        return inValue;
    }

    public static int RotWord(int inValue) {

        int temp;

        temp = Integer.rotateRight(inValue, 24) & 0x000000FF;

        inValue = Integer.rotateLeft(inValue, 8) & 0xFFFFFF00;

        inValue = inValue + temp;

        return inValue;
    }

    public static void PrintKey(int in0, int in1, int in2, int in3) {
        String OutString = "";

        int left;
        int right;

        left = Integer.rotateRight(in0, 16) & 0x0000FFFF;
        right = in0 & 0x0000FFFF;
        OutString = String.format("%04X", left) + " " + String.format("%04X", right);

        left = Integer.rotateRight(in1, 16) & 0x0000FFFF;
        right = in1 & 0x0000FFFF;
        OutString = OutString + " " + String.format("%04X", left) + " " + String.format("%04X", right);

        left = Integer.rotateRight(in2, 16) & 0x0000FFFF;
        right = in2 & 0x0000FFFF;
        OutString = OutString + " " + String.format("%04X", left) + " " + String.format("%04X", right);

        left = Integer.rotateRight(in3, 16) & 0x0000FFFF;
        right = in3 & 0x0000FFFF;
        OutString = OutString + " " + String.format("%04X", left) + " " + String.format("%04X", right);

        System.out.println(OutString);
    }

    public static void main(String[] args) {

        int Nk = 4;
        int Nb = 4;
        int Nr = 10;

        int[] rcon = { 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
                0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
                0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8,
                0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
                0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
                0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8,
                0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
                0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
                0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8,
                0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
                0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
                0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8,
                0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
                0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
                0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8,
                0xcb };

        // Extended Key
        int[] w = new int[Nb * (Nr + 1)];
        int temp;

        int i = 0;
        for (i = 0; i < Nk; i++) {
            w[i] = 0xFFFFFFFF;
        }

        for (i = Nk; i < (Nb * (Nr + 1)); i++) {
            temp = w[i - 1];

            if (i % Nk == 0) {
                temp = SubWord(RotWord(temp)) ^ rcon[i / Nk];
            }
            w[i] = w[i - Nk] ^ temp;
        }

        /*
         * System.out.println("w[0]: 0x" + Integer.toHexString(w[0]).toUpperCase());
         * temp = w[0]; w[0] = RotWord(temp);
         * System.out.println("w[0] after rotation: 0x" +
         * Integer.toHexString(w[0]).toUpperCase());
         * 
         * w[0] = SubWord(w[0]); System.out.println("w[0] after Substitution: 0x" +
         * Integer.toHexString(w[0]).toUpperCase());
         */

        // Now need to print Kex Schedule

        System.out.println("Key Schedule");
        for (i = 0; i < (Nr + 1); i++) {
            PrintKey(w[4 * i + 0], w[4 * i + 1], w[4 * i + 2], w[4 * i + 3]);
        }
    }
}